package main

import (
	"flag"
	"fmt"
	"go/format"
	"io/ioutil"
	"log"
	"os"
	"strings"
)

const (
	tmplHeader = `// Code generated by generator/assets/main.go. DO NOT EDIT.
package %s

import (
	"time"
		
	"github.com/minond/captainslog/assets"
)

func init() {
`

	tmplFooter = `}`

	tmplFile = `
dist.Mount(assets.File("%s", %d, 0%d, time.Unix(%d, 0),
	%#v))`
)

var (
	inputPath  = flag.String("input", "", "Path to directory to encode")
	outputPath = flag.String("output", "", "Path to output file.")
	packg      = flag.String("package", "main", "Package name")
)

func file(dir, name string) (string, error) {
	handle, err := os.Open(dir + name)
	if err != nil {
		return "", err
	}
	stat, err := handle.Stat()
	if err != nil {
		return "", err
	}
	contents, err := ioutil.ReadAll(handle)
	if err != nil {
		return "", err
	}
	return strings.TrimSpace(fmt.Sprintf(tmplFile,
		stat.Name(),
		stat.Size(),
		os.ModePerm, // stat.Mode(),
		stat.ModTime().Unix(),
		contents)), nil
}

func dir(path string) ([]string, error) {
	log.Printf("reading %s", path)
	content, err := ioutil.ReadDir(path)
	if err != nil {
		return nil, err
	}

	var files []string
	for _, f := range content {
		if f.IsDir() {
			continue
		}

		log.Printf("generating %s", f.Name())
		tmpl, err := file(path, f.Name())
		if err != nil {
			return nil, err
		}
		files = append(files, tmpl)
	}
	return files, nil
}

func init() {
	flag.Parse()
	log.SetFlags(0)
}

func main() {
	if inputPath == nil || outputPath == nil || packg == nil {
		log.Fatal("missing argument, an input, output, and package are all required")
	}

	files, err := dir(*inputPath)
	if err != nil {
		log.Fatalf("error generating file templates: %v", err)
	}

	head := fmt.Sprintf(tmplHeader, *packg)
	body := strings.Join(files, "\n")
	contents, err := format.Source([]byte(head + body + tmplFooter))
	if err != nil {
		log.Fatalf("formatting error: %v", err)
	}

	if err = ioutil.WriteFile(*outputPath, contents, 0644); err != nil {
		log.Fatalf("error writing to file: %v", err)
	}
	log.Printf("wrote %d bytes to %s as package `%s`", len(contents), *outputPath, *packg)
}
