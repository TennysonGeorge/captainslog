#!/bin/bash

set -Eeuo pipefail

CL_HOME=/home/marcos/apps/captainslog
CL_HOST=marcos@minond.xyz

LOG=.deploy.log

info() {
  echo "info: $*"
}

help() {
  echo "Usage: ./script/deploy [ -v | --version <version> ] [ --migrate ]"
  echo "                       [ --skip-build ] [ --skip-upload ] [ --skip-restart ]"
  echo "                       [ -h | --help ]"
}

build() {
  info "building"
  make build-server-prod >>$LOG 2>&1
}

upload() {
  local version="$1"
  local name="captainslog-v$version"
  info "uploading"
  scp captainslog "$CL_HOST:$CL_HOME/$name" >>$LOG 2>&1
}

link() {
  local version="$1"
  local name="captainslog-v$version"
  info "linking remote executable"
  run_remote "chmod +x $name ; ln --force -s $name captainslog"
}

run_remote() {
  info "executing $*"
  ssh "$CL_HOST" "cd $CL_HOME; $*"
}

CMD_KILL_CURRENT='kill -SIGINT $(ps aux | grep captainslog | grep server | head -n1 | awk "{ print \$2 }") || true'
CMD_START_BG='. env.sh; nohup ./captainslog server &>> out.log &'

restart() {
  info "restarting server"
  run_remote "$CMD_KILL_CURRENT ; $CMD_START_BG"
}

main() {
  run_build=1
  run_migrations=0
  run_restart=1
  run_upload=1
  version=$(date +%s)

  while [ $# -gt 0 ]; do
    case "$1" in
      --skip-build)
        run_build=0
        shift
        ;;

      --skip-upload)
        run_upload=0
        shift
        ;;

      --skip-restart)
        run_restart=0
        shift
        ;;

      --migrate)
        run_migrations=1
        shift
        ;;

      -v|--version)
        version="$2"
        shift
        shift
        ;;

      -h|--help)
        help
        exit 0
        ;;

      *)
        echo "invalid argument: $1"
        help
        exit 1
        ;;
    esac
  done

  echo -n > "$LOG"

  info "releasing v$version"
  if (( $run_build == 1 )); then
    build
  fi

  if (( $run_upload == 1 )); then
    upload "$version"
  fi

  link "$version"

  if (( $run_migrations == 1 )); then
    info "running migrations..."
    run_remote ". env.sh && ./captainslog migrate up"
  fi

  if (( $run_restart == 1 )); then
    restart
  fi

  info "done"
}

err_trap() {
  if [ -f $LOG ]; then
    echo
    echo "========================="
    tail -n 10 $LOG
    echo "========================="
    echo
    info "error detected, see $LOG for full log output"
  else
    info "error detected but no log was generated"
  fi
}

trap err_trap ERR

main $*
